const { chromium } = require('playwright');
const fastcsv = require('fast-csv');

(async () => {
  const URL = 'https://app.powerbigov.us/view?r=eyJrIjoiNDMwMDI0YmQtNmUyYS00ZmFjLWI0MGItZDM0OTY1Y2Y0YzNhIiwidCI6ImU0YTM0MGU2LWI4OWUtNGU2OC04ZWFhLTE1NDRkMjcwMzk4MCJ9'

  // some setup
  const browser = await chromium.launch({
    headless: true
  })
  const context = await browser.newContext({ recordVideo: { dir: 'videos/' } })
  const page = await context.newPage()

  // setup some handlers to deal with the data as it comes in
  const dataFromLabel = (label) => label.replace(/,/g,"").match(/\W(\d.*)\.$/)[1]
  const dataFromSelector = async (selector, dontProcessLabel) => {
    const elem = await page.$(selector)
    const label = await elem.evaluate(elem => elem.getAttribute('aria-label'))
    await elem.dispose()

    if (dontProcessLabel) return label
    return dataFromLabel(label)
  }
  const dataForRow = async (rowElem, facilityName, facilityType) => {
    await rowElem.click()

    // need to explicitly wait for the data to be rendered or we'll get the wrong facility
    // we're waiting for the console.log message (fake "event") generated by the handler above
    await page.waitForEvent('console', ev => ev.text() == "facility rendered")

    const output = {}

    output["Facility Name"] = facilityName
    output["Facility Type"] = facilityType
    const countyString = await dataFromSelector('path[aria-label*="Facility County"]', true)
    output["County"] = countyString.match(/Facility County (.*?)\./)[1]

    output["Unique Confirmed Cases"] = await dataFromSelector('svg[aria-label*="Unique Confirmed Cases"]')
    output["Deaths Residents/Patients"] = await dataFromSelector('div[aria-label*="Total number of COVID-19 resident deaths"] svg[aria-label*="Residents/Patients"]')
    output["Deaths Staff"] = await dataFromSelector('div[aria-label*="Total number of COVID-19 staff deaths"] svg[aria-label*="Staff"]')
    output["Attack Rate Residents/Patients"] = await dataFromSelector('div[aria-label*="Attack rate"] svg[aria-label*="Residents/Patients"]')
    output["Attack Rate Staff"] = await dataFromSelector('div[aria-label*="Attack rate"] svg[aria-label*="Staff"]')

    // we need to hover over each bar in the graph and read the tooltip to get the number of cases
    const casesTypes = ["Residents/Patients", "Staff", "Imported"]
    const casesSeries = await page.$$('div[aria-label*="Confirmed COVID-19 Cases"] g.series')
    for (const [i, series] of casesSeries.entries()) {
      // if the bar has no height, there's no tooltip, and the value is 0
      const rect = await series.$('rect')
      if (rect == null || await rect.getAttribute('height') === "0") {
        output["Confirmed COVID-19 Cases "+casesTypes[i]] = 0
        continue
      }

      await series.hover()
      await page.waitForTimeout(100)

      const tooltipElem = await page.waitForSelector('.tooltip-container')
      const casesType = await (await tooltipElem.$('.tooltip-row .tooltip-title-cell div')).textContent()
      const casesCount = await (await tooltipElem.$('.tooltip-row .tooltip-value-cell div')).textContent()
      output["Confirmed COVID-19 Cases "+casesType] = casesCount
    }

    return output
  }

  // collect the output in a dict where the keys are the facility names
  // this lets us eliminate duplicates from the scrolling process
  const allOutput = {}

  for (const facilityType of ["Assisted Living", "Skilled Nursing"]) {
    // load the page
    await page.goto(URL)

    // Click facility type .dropdown-chevron
    await page.click('div[aria-label*="Facility_Type"] .dropdown-chevron')

    // click the facility type
    await page.click(`div.row div.slicerItemContainer[aria-label*='${facilityType}']`)

    // click somewhere else to close the facility type
    await page.click('div[aria-label*="Confirmed COVID-19 Cases"]')

    // Click facility name .dropdown-chevron
    await page.click('div[aria-label*="Facility Name"] .dropdown-chevron')
    await page.waitForTimeout(1000)

    // add an event listener to the page to—sigh yes I know this is dumb just work with me here—output a
    // console log when the powerbi dashboard emits its own rendered event
    // (event listeners in playwright don't do what you'd expect, so we'll make our own ugly one)
    await page.evaluate('window.addEventListener("message", ev=>{ \n' +
      '    try {\n' +
      '        if (ev.data.url == "/reports/undefined/events/rendered") {\n' +
      '            console.log("facility rendered")\n' +
      '        }\n' +
      '    } catch (ex) {}\n' +
      '})')

    // the main event: go through all the facilities in the menu (the menu auto-populates itself as you scroll),
    // click each row in the menu, wait for the data to load, and extract it
    const rowSelector = 'div.slicer-dropdown-popup:not([style*="display: none"]) div.visibleGroup div.row div.slicerItemContainer'
    await page.waitForSelector(rowSelector)
    let lastProcessedFacility = undefined
    while (true) {
      // get the current set of visible facilities from the menu
      let rows = await page.$$(rowSelector)

      // peak ahead at the end of the list. If we're not getting any new facilities, we're done
      const lastRow = rows.slice(-1)[0]
      const lastFacilityName = await lastRow.evaluate(elem => elem.getAttribute('aria-label'))
      if (lastProcessedFacility === lastFacilityName) break

      // if it's not our first pass, we've already processed most of these rows, so just jump to the end
      // we want to make sure we don't miss any no matter how far we scroll, so we overlap a bit
      if (lastProcessedFacility !== undefined) {
        rows = rows.slice(-4)
      }

      // iterate over each facility and collect the data
      for (const rowElem of rows) {
        // get the facility name and see if we need to process it
        let facilityName = await rowElem.evaluate(elem => elem.getAttribute('aria-label'))
        if (facilityName === "Select all") facilityName = facilityName + "-" + facilityType
        if (allOutput[facilityName] !== undefined) continue // already did this one

        // collect all the facility data
        const rowData = await dataForRow(rowElem, facilityName, facilityType)
        if (rowData !== undefined) {
          allOutput[facilityName] = rowData
        }
        lastProcessedFacility = facilityName
      }
      // now we're out of facilities. on the next pass through the loop, we'll have more to process because the click()
      // on the bottom one automatically scrolled more facilities into view.
    }
  }

  const csvStream = fastcsv.format({ headers: true })
  csvStream.pipe(process.stdout).on('end', () => process.exit());
  for (const data of Object.values(allOutput)) {
    csvStream.write(data)
  }
  csvStream.end();

  // cleanup
  await page.close();
  await context.close();
  await browser.close();
})().catch((ex) => {console.error(ex); process.exit(1)});
